<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Montree Bungnasang]]></title>
  <link href="http://gailo22.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://gailo22.github.io/"/>
  <updated>2014-07-14T18:21:25+07:00</updated>
  <id>http://gailo22.github.io/</id>
  <author>
    <name><![CDATA[gailo22]]></name>
    <email><![CDATA[gailo22@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java 7 Features that I have missed]]></title>
    <link href="http://gailo22.github.io/blog/2014/07/14/java-7-features-that-i-have-missed/"/>
    <updated>2014-07-14T17:00:29+07:00</updated>
    <id>http://gailo22.github.io/blog/2014/07/14/java-7-features-that-i-have-missed</id>
    <content type="html"><![CDATA[<p>I never have a chance to use the new features of Java 7 in my day-to-day basis project, so just want to keep it as a reference here:</p>

<ul>
<li>Strings in switch</li>
<li>Diamond Operator</li>
<li>try-with-resources statement</li>
<li>Multi-catch exception</li>
<li>Files</li>
<li>equals, hashCode and comparaTo methods</li>
<li>Null checks</li>
</ul>


<h2>Strings in switch</h2>

<p>```java
String s = &hellip;</p>

<p>switch (s) {</p>

<pre><code>case "hello": ...; break;
...
</code></pre>

<p>}
```</p>

<h2>Diamond Operator</h2>

<p>Instread of:
<code>java
Map&lt;String, Integer&gt; = new HashMap&lt;String, Integer&gt;();
</code>
You can write:
<code>java
Map&lt;String, Integer&gt; = new HashMap&lt;&gt;();
</code></p>

<h2>try-with-resources statement</h2>

<p>```java
try (Resource res = &hellip;) {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>when the <code>try</code> block exit, <code>res.close()</code> will be called autometically.</p>

<h2>Multi-catch exception</h2>

<p>```java
try {
 //do someting;
}
catch(Exception1, Exception2 e) {
 handleException(e)
}</p>

<p>```</p>

<h2>Files</h2>

<p>It provided static methods to manage a file e.g. <code>Files',</code>Paths`:</p>

<p>```java
Path absolute = Paths.get(&ldquo;/&rdquo;, &ldquo;home&rdquo;, &ldquo;dev&rdquo;)
Path relative = Paths.get(&ldquo;app&rdquo;, &ldquo;config&rdquo;, &ldquo;user.properties&rdquo;)</p>

<p>```</p>

<h2>equals, hashCode and comparaTo methods</h2>

<p>There are static mehtods of `Objects' class:</p>

<p>```java
Objects.equals(a, b)
Objects.hashCode(a)
Objects.hash(first, last)</p>

<p>Integer.compare(a, b)</p>

<p>```</p>

<h2>Null checks</h2>

<p>A static method to check null:</p>

<p>```java
String hello = &hellip;
Objects.requireNonNull(hello)</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pass Function as Argument in Java 8]]></title>
    <link href="http://gailo22.github.io/blog/2014/03/19/pass-function-as-argument-in-java-8/"/>
    <updated>2014-03-19T11:15:38+07:00</updated>
    <id>http://gailo22.github.io/blog/2014/03/19/pass-function-as-argument-in-java-8</id>
    <content type="html"><![CDATA[<p>Last time I posted about <a href="/blog/2014/02/28/pass-function-as-argument-java/">How to pass function as argument in Java</a> this version using java before java 8, today java 8 is just <a href="https://blogs.oracle.com/thejavatutorials/entry/jdk_8_is_released">released</a>, I will update the previous code to use java. It kinds of cool now. :D</p>

<p>```java</p>

<p>import java.util.function.Function;</p>

<p>public class BinaryTest {</p>

<pre><code>public static void main(String[] args) {

    byte[] bs = "gailo".getBytes();

    System.out.println("oct: " + toString(bs, (x) -&gt; Integer.toString(x)));

    System.out.println("binary: " + toString(bs, Integer::toBinaryString));

    System.out.println("hex: " + toString(bs, Integer::toHexString));

}

private static String toString(byte[] bs, Function&lt;Integer, String&gt; function) {
    StringBuilder sb = new StringBuilder();
    for (byte b : bs) {
        sb.append(function.apply(new Integer(b)));
        sb.append(" ");
    }
    return sb.toString();
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Integration Test with Spring]]></title>
    <link href="http://gailo22.github.io/blog/2014/03/05/create-integration-test-with-spring/"/>
    <updated>2014-03-05T11:20:55+07:00</updated>
    <id>http://gailo22.github.io/blog/2014/03/05/create-integration-test-with-spring</id>
    <content type="html"><![CDATA[<p>Assume you want to create a integration test for UserDao class which has CRUD methods e.g find, save, update, delete.</p>

<h3>Please note that for integration test:</h3>

<ul>
<li>we are testing with other system like db so, we may require populate example data before test.</li>
<li><p>the test method name should say that we are expecting the actual return value or save successfully, NOT invoke or interaction with some method</p></li>
<li><p>shouldReturnNewUserWhenCreateNewUserOnSave() –> <strong>OK</strong></p></li>
<li>shouldInvokeSaveMehtodWhenUserIsNotNullOnSave() –> <strong>NOT</strong></li>
</ul>


<p>```java
@Repository(&ldquo;userDao&rdquo;)
public class UserDaoImpl implements UserDao {</p>

<pre><code>User find(PK id) {...}
User save(User object) {...}
boolean delete(PK id) {...}
</code></pre>

<p>}
```</p>

<h2>Create new class name UserDaoIntegrationTest with annotations as below</h2>

<p>```java
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = &ldquo;classpath:applicationContext-dao-test.xml&rdquo;)
@Transactional
public class UserDaoIntegrationTest {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<h2>Inject class you want to test</h2>

<p><code>java
@Autowired
private UserDao userDao;
</code></p>

<h2>Crete test method</h2>

<p>```java
@Test
public void shoudXXX() {</p>

<pre><code>...  
</code></pre>

<p>}
```</p>

<h2>Verify actual return value</h2>

<p><code>java
assertThat(user.getUserName(), equalTo("user1"));
</code></p>

<h1>Method Template</h1>

<p>```java
@Test
public void should<Expecting>When<Criteria>On<MehtodName> {</p>

<pre><code>// Given
Populate require arguments for testing method.

// When
Invoke method you want to test with actual value.

// Then
Check return value from the method.
</code></pre>

<p>}
```</p>

<h1>Example</h1>

<p>```java
@Test
public void shouldReturnUserOnFindByKey() throws Exception {</p>

<pre><code>// Given // When 
final User user = this.userDao.find(1L);

// Then
assertThat(user.getUserName(), equalTo("user1"));
</code></pre>

<p>}</p>

<p>@Test
public void shouldCreateNewUserOnSave() throws Exception {</p>

<pre><code>// Given 
final User newUser = User.getDefaultObject();
newUser.setReferenceType(ReferenceType.MYKAD);
newUser.setUserName("abc");
newUser.setPassword("password");
newUser.setName("name");
newUser.setEmail("abc@email.com");
newUser.setUserStatus(UserStatus.ACTIVE);
newUser.setCreatedBy("admin");
newUser.setLastModifiedBy("admin");

// When
final User createdUser = this.userDao.save(newUser);

// Then
final User foundUser = this.userDao.find(createdUser.getId());
assertThat(foundUser.getUserName(), equalTo("abc"));
assertThat(foundUser.getPassword(), equalTo("password"));
assertThat(foundUser.getEmail(), equalTo("abc@email.com"));
assertThat(foundUser.getCreatedBy(), equalTo("admin"));
assertThat(foundUser.getLastModifiedBy(), equalTo("admin"));
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Unit Test with Mockito]]></title>
    <link href="http://gailo22.github.io/blog/2014/03/03/create-unit-test-with-mockito/"/>
    <updated>2014-03-03T15:21:30+07:00</updated>
    <id>http://gailo22.github.io/blog/2014/03/03/create-unit-test-with-mockito</id>
    <content type="html"><![CDATA[<p>Assume you want to create a unit test for UserService class, getUserByUserName(String username) method.</p>

<p>```java
@Service(&ldquo;userService&rdquo;)
public class UserServiceImpl implements UserService {</p>

<pre><code>@Autowired
private UserDao userDao;

public User getUserByUserName(String username) {
    ...
    userDao.getUserByName(username);
    ...
}
</code></pre>

<p>}
```</p>

<h2>Create new class name UserServiceImplTest</h2>

<p>```java
public class UserServiceImplTest {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<h2>Inject class you want to test</h2>

<p>```java
@InjectMocks
private UserServiceImpl userService;</p>

<p>```</p>

<h2>Mock related objects</h2>

<p><code>java
@Mock
private UserDao userDaoMock;
</code></p>

<h2>Setup annotation support</h2>

<p>```java
@Before
public void setup() {</p>

<pre><code>initMocks(this);
</code></pre>

<p>}
```</p>

<h2>Create test method</h2>

<p>```java
@Test
public void shoudXXX() {</p>

<p>}
```</p>

<h2>Verify expectation</h2>

<p><code>java
verify(userService).getUserById("admin");
assertThat(true, equalTo(true));
</code></p>

<h2>Static import required classes</h2>

<p>```java
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;</p>

<p>import static org.hamcrest.core.IsEqual.equalTo;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.MockitoAnnotations.initMocks;
```</p>

<h1>Method Template</h1>

<p>```java
@Test
public void should<Expecting>When<Criteria>On<MehtodName> {</p>

<pre><code>// Given
Declare your mock object and expectation.

// When
Invoke method you want to test.

// Then
Verify method invocation.
Check return value from the method.
</code></pre>

<p>}
```</p>

<h1>Example</h1>

<p>```java
@Test
public void shouldReturnUserWhenUserNameIsNotNullOnGetUserByUserName {</p>

<pre><code>// Given
User userMock = mock(User.class);
when(userDaoMock.getByUserName("admin")).thenReturn(userMock);

// When
User returnUser = userService.getUserByUserName("admin");

// Then
assertThat(returnUser, equalTo(userMock));
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pass function as argument in Java]]></title>
    <link href="http://gailo22.github.io/blog/2014/02/28/pass-function-as-argument-java/"/>
    <updated>2014-02-28T11:57:17+07:00</updated>
    <id>http://gailo22.github.io/blog/2014/02/28/pass-function-as-argument-java</id>
    <content type="html"><![CDATA[<p>This is an example of passing function as argument in java. It kind of ugly but it can solve my duplicate code problem as below:</p>

<h2>before</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryTest</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span> <span class="o">=</span> <span class="s">&quot;gailo&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;oct: &quot;</span> <span class="o">+</span> <span class="n">toOct</span><span class="o">(</span><span class="n">bs</span><span class="o">));</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;binary: &quot;</span> <span class="o">+</span> <span class="n">toBin</span><span class="o">(</span><span class="n">bs</span><span class="o">));</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;hex: &quot;</span> <span class="o">+</span> <span class="n">toHex</span><span class="o">(</span><span class="n">bs</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toOct</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toBin</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="n">b</span><span class="o">));</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toHex</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">b</span><span class="o">));</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>after</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">com.google.common.base.Function</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryTest</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span> <span class="o">=</span> <span class="s">&quot;gailo&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;oct: &quot;</span> <span class="o">+</span> <span class="n">toString</span><span class="o">(</span><span class="n">bs</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Integer</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;binary: &quot;</span> <span class="o">+</span> <span class="n">toString</span><span class="o">(</span><span class="n">bs</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Integer</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;hex: &quot;</span> <span class="o">+</span> <span class="n">toString</span><span class="o">(</span><span class="n">bs</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Integer</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}));</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span><span class="o">,</span> <span class="n">Function</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">function</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">function</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">b</span><span class="o">)));</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
