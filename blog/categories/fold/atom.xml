<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fold | Montree Bungnasang]]></title>
  <link href="http://gailo22.github.io/blog/categories/fold/atom.xml" rel="self"/>
  <link href="http://gailo22.github.io/"/>
  <updated>2015-04-23T23:10:09+08:00</updated>
  <id>http://gailo22.github.io/</id>
  <author>
    <name><![CDATA[gailo22]]></name>
    <email><![CDATA[gailo22@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Map, Filter and Fold in Haskell]]></title>
    <link href="http://gailo22.github.io/blog/2014/03/25/map-filter-and-fold-in-haskell/"/>
    <updated>2014-03-25T12:56:46+08:00</updated>
    <id>http://gailo22.github.io/blog/2014/03/25/map-filter-and-fold-in-haskell</id>
    <content type="html"><![CDATA[<p>This example shows 3 key features of functional programming: <code>map</code> <code>filter</code> and <code>map</code> function using <strong>haskell</strong>.</p>

<h2>Map</h2>

<p>The function takes a function from a to b <code>(a -&gt; b)</code> and a list of a <code>[a]</code> then product a list of b <code>[b]</code>.</p>

<p>```haskell</p>

<p>map :: (a &ndash;> b) &ndash;> [a] &ndash;> [b]
map f xs = [ f x | x &lt;&ndash; xs ]</p>

<p>mapRec :: (a &ndash;> b) &ndash;> [a] &ndash;> [b]
mapRec f []     = []
mapRec f (x:xs) = f x : mapRec f xs</p>

<p>```</p>

<h2>Filter</h2>

<p>The function takes a predicate function <code>(a -&gt; Bool)</code> that return boolean (true/false) and a list <code>[a]</code> then produce a filtered list <code>[a]</code>.</p>

<p>```haskell
filter :: (a &ndash;> Bool) &ndash;> [a] &ndash;> [a]
filter p xs = [ x | x &lt;&ndash; xs, p x ]</p>

<p>filterRec :: (a &ndash;> Bool) &ndash;> [a] &ndash;> [a]
filterRec p []                 = []
filterRec p (x:xs) | p x       = x : filterRec p xs</p>

<pre><code>               | otherwise = filterRec p xs
</code></pre>

<p>```</p>

<h2>Fold</h2>

<p>The function takes a 2 parameters function <code>(a -&gt; a -&gt; a)</code>, an initial accumulator and a list then return an accumulate result.</p>

<p>```haskell</p>

<p>foldr :: (a &ndash;> a &ndash;> a) &ndash;> a &ndash;> [a] &ndash;> a
foldr f a []     = a
foldr f a (x:xs) = f x (foldr f a xs)</p>

<p>foldl :: (a &ndash;> a &ndash;> a) &ndash;> a &ndash;> [a] &ndash;> a
foldl f a []     = a
foldl f a (x:xs) = foldl f (f a x) xs</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
