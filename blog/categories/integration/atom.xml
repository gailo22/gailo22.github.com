<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: integration | Montree Bungnasang]]></title>
  <link href="http://gailo22.github.io/blog/categories/integration/atom.xml" rel="self"/>
  <link href="http://gailo22.github.io/"/>
  <updated>2014-03-25T12:52:57+07:00</updated>
  <id>http://gailo22.github.io/</id>
  <author>
    <name><![CDATA[gailo22]]></name>
    <email><![CDATA[gailo22@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create Integration Test with Spring]]></title>
    <link href="http://gailo22.github.io/blog/2014/03/05/create-integration-test-with-spring/"/>
    <updated>2014-03-05T11:20:55+07:00</updated>
    <id>http://gailo22.github.io/blog/2014/03/05/create-integration-test-with-spring</id>
    <content type="html"><![CDATA[<p>Assume you want to create a integration test for UserDao class which has CRUD methods e.g find, save, update, delete.</p>

<h3>Please note that for integration test:</h3>

<ul>
<li>we are testing with other system like db so, we may require populate example data before test.</li>
<li><p>the test method name should say that we are expecting the actual return value or save successfully, NOT invoke or interaction with some method</p></li>
<li><p>shouldReturnNewUserWhenCreateNewUserOnSave() –> <strong>OK</strong></p></li>
<li>shouldInvokeSaveMehtodWhenUserIsNotNullOnSave() –> <strong>NOT</strong></li>
</ul>


<p>```java
@Repository(&ldquo;userDao&rdquo;)
public class UserDaoImpl implements UserDao {</p>

<pre><code>User find(PK id) {...}
User save(User object) {...}
boolean delete(PK id) {...}
</code></pre>

<p>}
```</p>

<h2>Create new class name UserDaoIntegrationTest with annotations as below</h2>

<p>```java
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = &ldquo;classpath:applicationContext-dao-test.xml&rdquo;)
@Transactional
public class UserDaoIntegrationTest {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<h2>Inject class you want to test</h2>

<p><code>java
@Autowired
private UserDao userDao;
</code></p>

<h2>Crete test method</h2>

<p>```java
@Test
public void shoudXXX() {</p>

<pre><code>...  
</code></pre>

<p>}
```</p>

<h2>Verify actual return value</h2>

<p><code>java
assertThat(user.getUserName(), equalTo("user1"));
</code></p>

<h1>Method Template</h1>

<p>```java
@Test
public void should<Expecting>When<Criteria>On<MehtodName> {</p>

<pre><code>// Given
Populate require arguments for testing method.

// When
Invoke method you want to test with actual value.

// Then
Check return value from the method.
</code></pre>

<p>}
```</p>

<h1>Example</h1>

<p>```java
@Test
public void shouldReturnUserOnFindByKey() throws Exception {</p>

<pre><code>// Given // When 
final User user = this.userDao.find(1L);

// Then
assertThat(user.getUserName(), equalTo("user1"));
</code></pre>

<p>}</p>

<p>@Test
public void shouldCreateNewUserOnSave() throws Exception {</p>

<pre><code>// Given 
final User newUser = User.getDefaultObject();
newUser.setReferenceType(ReferenceType.MYKAD);
newUser.setUserName("abc");
newUser.setPassword("password");
newUser.setName("name");
newUser.setEmail("abc@email.com");
newUser.setUserStatus(UserStatus.ACTIVE);
newUser.setCreatedBy("admin");
newUser.setLastModifiedBy("admin");

// When
final User createdUser = this.userDao.save(newUser);

// Then
final User foundUser = this.userDao.find(createdUser.getId());
assertThat(foundUser.getUserName(), equalTo("abc"));
assertThat(foundUser.getPassword(), equalTo("password"));
assertThat(foundUser.getEmail(), equalTo("abc@email.com"));
assertThat(foundUser.getCreatedBy(), equalTo("admin"));
assertThat(foundUser.getLastModifiedBy(), equalTo("admin"));
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
