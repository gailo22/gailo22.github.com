<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Montree Bungnasang]]></title>
  <link href="http://gailo22.github.io/atom.xml" rel="self"/>
  <link href="http://gailo22.github.io/"/>
  <updated>2015-04-23T23:10:09+08:00</updated>
  <id>http://gailo22.github.io/</id>
  <author>
    <name><![CDATA[gailo22]]></name>
    <email><![CDATA[gailo22@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GIT useful commands]]></title>
    <link href="http://gailo22.github.io/blog/2015/04/23/git-useful-commands/"/>
    <updated>2015-04-23T22:59:04+08:00</updated>
    <id>http://gailo22.github.io/blog/2015/04/23/git-useful-commands</id>
    <content type="html"><![CDATA[<p>This is a collections of <code>git</code> commands I use as a references when I was lazy to remember them all:</p>

<h2>Create and Checkout a New Branch</h2>

<h2>Branches from currently checked out directory</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -b &lt;branchName&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Checkout a Remote Branch</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -b &lt;localBranchName&gt; origin/&lt;remoteBranchName&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Clone specific branch from remote</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone -b &lt;branch&gt; &lt;remote_repo&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Abort Changes of a File</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -- &lt;fileName&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Modify the Previous Commit&rsquo;s Message</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit --amend</span></code></pre></td></tr></table></div></figure>


<h2>Partial Change Checkin</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add --edit</span></code></pre></td></tr></table></div></figure>


<h2>Undo the Previous Commit</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git revert HEAD^</span></code></pre></td></tr></table></div></figure>


<h2>Temporarily Stash Changes, Restore Later</h2>

<h2>After changes have been made&hellip;</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git stash
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>Do some other stuff here, like switch branches, merge other changes, etc.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Re-apply the changes
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>$ git stash pop</span></code></pre></td></tr></table></div></figure>


<h2>Rename a local branch</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git branch -m &lt;new branch name&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Delete a local branch</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git branch -d the_local_branch</span></code></pre></td></tr></table></div></figure>


<h2>Delete a Remote Branch</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin :&lt;branchName&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Add a remote branch</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote add &lt;remoteName&gt; &lt;gitAddress&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Get changes from that branch</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git fetch &lt;remoteName&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Tagging, Deleting, and Pushing Tags</h2>

<h2>Create a Tag</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag &lt;tagName&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Delete the tag</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag -d &lt;tagName&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Push Tags</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push --tags</span></code></pre></td></tr></table></div></figure>


<h2>Combining multiple commits before pushing in Git</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git rebase -i origin/master
</span><span class='line'>#(-i is for "interactive")</span></code></pre></td></tr></table></div></figure>


<h2>Fixing bugs process</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -b issue-#001 master
</span><span class='line'># Fix the bug ...
</span><span class='line'>$ git checkout master
</span><span class='line'>$ git merge issue-#001
</span><span class='line'>$ git push
</span><span class='line'>
</span><span class='line'># also push to develop branch
</span><span class='line'>$ git checkout develop
</span><span class='line'>$ git merge issue-#001
</span><span class='line'>$ git push
</span><span class='line'>$ git branch -d issue-#001
</span><span class='line'>
</span><span class='line'># non-fast-forward-merge
</span><span class='line'>$ git merge --no-ff</span></code></pre></td></tr></table></div></figure>


<h2>Create new branch on remote repo</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git branch develop
</span><span class='line'>$ git push -u origin develop</span></code></pre></td></tr></table></div></figure>


<h2>Whenever you merge something into master, you should tag the commit for easy reference:</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag -a 0.1 -m "Initial public release" master
</span><span class='line'>$ git push --tags</span></code></pre></td></tr></table></div></figure>


<h2>Force pull from remote</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git fetch --all
</span><span class='line'>$ git reset --hard origin/master</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout develop
</span><span class='line'>Switched to branch 'develop'
</span><span class='line'>$ git merge --no-ff myfeature
</span><span class='line'>Updating ea1b82a..05e9557
</span><span class='line'>(Summary of changes)
</span><span class='line'>$ git branch -d myfeature
</span><span class='line'>Deleted branch myfeature (was 05e9557).
</span><span class='line'>$ git push origin develop</span></code></pre></td></tr></table></div></figure>


<h2>Remove all deleted files before commit</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git rm
</span><span class='line'>
</span><span class='line'>$(git ls-files --deleted)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[List of Responsive Web Frameworks]]></title>
    <link href="http://gailo22.github.io/blog/2015/03/24/list-of-responsive-web-frameworks/"/>
    <updated>2015-03-24T21:16:25+08:00</updated>
    <id>http://gailo22.github.io/blog/2015/03/24/list-of-responsive-web-frameworks</id>
    <content type="html"><![CDATA[<p>To make your web application responsive is the essentials part of web devepment now a days. A lot of responsive frameworks have been built for that.
This is the top list:</p>

<ul>
<li>Twitter Boostrap (<a href="http://getbootstrap.com/">http://getbootstrap.com/</a>)</li>
<li>Foundation (<a href="http://foundation.zurb.com/">http://foundation.zurb.com/</a>)</li>
<li>Gumby (<a href="http://gumbyframework.com/">http://gumbyframework.com/</a>)</li>
<li>Pure (<a href="http://purecss.io/">http://purecss.io/</a>)</li>
<li>Base (<a href="http://matthewhartman.github.io/base/">http://matthewhartman.github.io/base/</a>)</li>
<li>Responsive Grid System (<a href="http://www.responsivegridsystem.com/">http://www.responsivegridsystem.com/</a>)</li>
<li>Skeleton (<a href="http://getskeleton.com/">http://getskeleton.com/</a>)</li>
<li>Mueller Grid System (<a href="http://muellergridsystem.com/">http://muellergridsystem.com/</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 7 Features that I have missed]]></title>
    <link href="http://gailo22.github.io/blog/2014/07/14/java-7-features-that-i-have-missed/"/>
    <updated>2014-07-14T18:00:29+08:00</updated>
    <id>http://gailo22.github.io/blog/2014/07/14/java-7-features-that-i-have-missed</id>
    <content type="html"><![CDATA[<p>I never have a chance to use the new features of Java 7 in my day-to-day basis project, so just want to keep it as a reference here:</p>

<ul>
<li>Strings in switch</li>
<li>Diamond Operator</li>
<li>try-with-resources statement</li>
<li>Multi-catch exception</li>
<li>Files</li>
<li>equals, hashCode and comparaTo methods</li>
<li>Null checks</li>
</ul>


<h2>Strings in switch</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">switch</span> <span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="s">&quot;hello&quot;</span><span class="o">:</span> <span class="o">...;</span> <span class="k">break</span><span class="o">;</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Diamond Operator</h2>

<p>Instread of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>try-with-resources statement</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">(</span><span class="n">Resource</span> <span class="n">res</span> <span class="o">=</span> <span class="o">...)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>when the <code>try</code> block exit, <code>res.close()</code> will be called autometically.</p>

<h2>Multi-catch exception</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'> <span class="c1">//do someting;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">catch</span><span class="o">(</span><span class="n">Exception1</span><span class="o">,</span> <span class="n">Exception2</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="n">handleException</span><span class="o">(</span><span class="n">e</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Files</h2>

<p>It provided static methods to manage a file e.g. <code>Files</code>, <code>Paths</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Path</span> <span class="n">absolute</span> <span class="o">=</span> <span class="n">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">,</span> <span class="s">&quot;home&quot;</span><span class="o">,</span> <span class="s">&quot;dev&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">Path</span> <span class="n">relative</span> <span class="o">=</span> <span class="n">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;app&quot;</span><span class="o">,</span> <span class="s">&quot;config&quot;</span><span class="o">,</span> <span class="s">&quot;user.properties&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>equals, hashCode and comparaTo methods</h2>

<p>There are static mehtods of <code>Objects</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span><span class='line'><span class="n">Objects</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'><span class="n">Objects</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="n">first</span><span class="o">,</span> <span class="n">last</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Null checks</h2>

<p>A static method to check null:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">hello</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'><span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">hello</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Translation of For in scala]]></title>
    <link href="http://gailo22.github.io/blog/2014/04/23/translation-of-for-in-scala/"/>
    <updated>2014-04-23T12:05:13+08:00</updated>
    <id>http://gailo22.github.io/blog/2014/04/23/translation-of-for-in-scala</id>
    <content type="html"><![CDATA[<blockquote><p>There are 2 kinds of <strong>for</strong> in scala:</p>

<blockquote><ol>
<li>for-loops</li>
<li>for-comprehensions</li>
</ol>
</blockquote></blockquote>

<h1>for-loops</h1>

<p>The for-loops is like for-loops in <code>java</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="n">xs</span><span class="o">)</span> <span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>is the same as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">xs</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">x</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h1>for-comprehensions</h1>

<p>This example shows how scala translate <code>for</code> comprehensions into term of expression <code>map</code> <code>flatMap</code> and <code>filter</code>.</p>

<h2>1. A simple for-expression (1 generator)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="n">e1</span><span class="o">)</span> <span class="k">yield</span> <span class="n">e2</span>
</span></code></pre></td></tr></table></div></figure>


<p>to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">e1</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">e2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. A for-expression with if</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="n">e1</span> <span class="k">if</span> <span class="n">f</span><span class="o">;</span> <span class="n">s</span><span class="o">)</span> <span class="k">yield</span> <span class="n">e2</span>
</span></code></pre></td></tr></table></div></figure>


<p>to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="n">e1</span><span class="o">.</span><span class="n">withFilter</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">);</span> <span class="n">s</span><span class="o">)</span> <span class="k">yield</span> <span class="n">e2</span>
</span></code></pre></td></tr></table></div></figure>


<p>and traslate continue until be a simple form</p>

<h2>3. A for-expression with 2 generators</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="n">e1</span><span class="o">;</span> <span class="n">y</span> <span class="k">&lt;-</span> <span class="n">e2</span><span class="o">;</span> <span class="n">s</span><span class="o">)</span> <span class="k">yield</span> <span class="n">e3</span>
</span></code></pre></td></tr></table></div></figure>


<p>to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">e1</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="k">for</span> <span class="o">(</span><span class="n">y</span> <span class="k">&lt;-</span> <span class="n">e2</span><span class="o">;</span> <span class="n">s</span><span class="o">)</span> <span class="k">yield</span> <span class="n">e3</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>and traslate continue until be a simple form</p>

<h2>Example:</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">for</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">x</span> <span class="k">&lt;-</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">N</span>
</span><span class='line'>  <span class="n">y</span> <span class="k">&lt;-</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">x</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">%</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span> <span class="k">yield</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="n">N</span><span class="o">)</span> <span class="n">flatMap</span> <span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="n">x</span><span class="o">)</span> <span class="n">withFilter</span> <span class="o">(</span><span class="n">y</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">%</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">map</span> <span class="o">(</span><span class="n">y</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Map, Filter and Fold in Haskell]]></title>
    <link href="http://gailo22.github.io/blog/2014/03/25/map-filter-and-fold-in-haskell/"/>
    <updated>2014-03-25T12:56:46+08:00</updated>
    <id>http://gailo22.github.io/blog/2014/03/25/map-filter-and-fold-in-haskell</id>
    <content type="html"><![CDATA[<p>This example shows 3 key features of functional programming: <code>map</code> <code>filter</code> and <code>map</code> function using <strong>haskell</strong>.</p>

<h2>Map</h2>

<p>The function takes a function from a to b <code>(a -&gt; b)</code> and a list of a <code>[a]</code> then product a list of b <code>[b]</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">map</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>
</span><span class='line'><span class="nf">map</span> <span class="n">f</span> <span class="n">xs</span> <span class="ow">=</span> <span class="p">[</span> <span class="n">f</span> <span class="n">x</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">xs</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">mapRec</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>
</span><span class='line'><span class="nf">mapRec</span> <span class="n">f</span> <span class="kt">[]</span>     <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">mapRec</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">f</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">mapRec</span> <span class="n">f</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Filter</h2>

<p>The function takes a predicate function <code>(a -&gt; Bool)</code> that return boolean (true/false) and a list <code>[a]</code> then produce a filtered list <code>[a]</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">filter</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">filter</span> <span class="n">p</span> <span class="n">xs</span> <span class="ow">=</span> <span class="p">[</span> <span class="n">x</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">xs</span><span class="p">,</span> <span class="n">p</span> <span class="n">x</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">filterRec</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">filterRec</span> <span class="n">p</span> <span class="kt">[]</span>                 <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">filterRec</span> <span class="n">p</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">|</span> <span class="n">p</span> <span class="n">x</span>       <span class="ow">=</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">filterRec</span> <span class="n">p</span> <span class="n">xs</span>
</span><span class='line'>                   <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">filterRec</span> <span class="n">p</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Fold</h2>

<p>The function takes a 2 parameters function <code>(a -&gt; a -&gt; a)</code>, an initial accumulator and a list then return an accumulate result.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">foldr</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldr</span> <span class="n">f</span> <span class="n">a</span> <span class="kt">[]</span>     <span class="ow">=</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldr</span> <span class="n">f</span> <span class="n">a</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">f</span> <span class="n">x</span> <span class="p">(</span><span class="n">foldr</span> <span class="n">f</span> <span class="n">a</span> <span class="n">xs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">foldl</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldl</span> <span class="n">f</span> <span class="n">a</span> <span class="kt">[]</span>     <span class="ow">=</span> <span class="n">a</span>
</span><span class='line'><span class="nf">foldl</span> <span class="n">f</span> <span class="n">a</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">foldl</span> <span class="n">f</span> <span class="p">(</span><span class="n">f</span> <span class="n">a</span> <span class="n">x</span><span class="p">)</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pass Function as Argument in Java 8]]></title>
    <link href="http://gailo22.github.io/blog/2014/03/19/pass-function-as-argument-in-java-8/"/>
    <updated>2014-03-19T12:15:38+08:00</updated>
    <id>http://gailo22.github.io/blog/2014/03/19/pass-function-as-argument-in-java-8</id>
    <content type="html"><![CDATA[<p>Last time I posted about <a href="http://gailo22.github.io/blog/2014/02/28/pass-function-as-argument-java/">How to pass function as argument in Java</a> this version using java before java 8, today java 8 is just <a href="https://blogs.oracle.com/thejavatutorials/entry/jdk_8_is_released">released</a>, I will update the previous code to use java. It kinds of cool now. :D</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.function.Function</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span> <span class="o">=</span> <span class="s">&quot;gailo&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;oct: &quot;</span> <span class="o">+</span> <span class="n">toString</span><span class="o">(</span><span class="n">bs</span><span class="o">,</span> <span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">x</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;binary: &quot;</span> <span class="o">+</span> <span class="n">toString</span><span class="o">(</span><span class="n">bs</span><span class="o">,</span> <span class="nl">Integer:</span><span class="o">:</span><span class="n">toBinaryString</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;hex: &quot;</span> <span class="o">+</span> <span class="n">toString</span><span class="o">(</span><span class="n">bs</span><span class="o">,</span> <span class="nl">Integer:</span><span class="o">:</span><span class="n">toHexString</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span><span class="o">,</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">function</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">function</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">b</span><span class="o">)));</span>
</span><span class='line'>          <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polya's Problem Solving Techniques]]></title>
    <link href="http://gailo22.github.io/blog/2014/03/12/polyas-problem-solving-techniques/"/>
    <updated>2014-03-12T12:07:26+08:00</updated>
    <id>http://gailo22.github.io/blog/2014/03/12/polyas-problem-solving-techniques</id>
    <content type="html"><![CDATA[<p>In 1945 George Polya published the book How To Solve It which quickly became
his most prized publication. It sold over one million copies and has been translated
into 17 languages. In this book he identifies four basic principles of problem solving.</p>

<h2>Polya&rsquo;s First Principle: Understand the problem</h2>

<p>This seems so obvious that it is often not even mentioned, yet studens are often
stymied in their efforts to solve problems simply because they don&rsquo;t understand it
fully, or even in part. Polya taught teachers to ask students questions such as:</p>

<ul>
<li>Do you understand all the words used in stating the problem?</li>
<li>What are you asked to find or show?</li>
<li>Can you restate the problem in your own words?</li>
<li>Can you think of a picture or diagram that might help you understand the
problem?</li>
<li>Is there enough information to enable you to find a solution?</li>
</ul>


<h2>Polya&rsquo;s Second Principle: Devise a plan</h2>

<p>Polya mentions that there are many reasonable ways to solve problems. The skill
at choosing an appropriate strategy is best learned by solving many problems. You
will find choosing a strategy increasingly easy. A partial list of strategies is included:</p>

<ul>
<li>Guess and check</li>
<li>Look for a pattern</li>
<li>Make an orderly list</li>
<li>Draw a picture</li>
<li>Eliminate possibilities</li>
<li>Solve a simpler problem</li>
<li>Use symmetry</li>
<li>Use a model</li>
<li>Consider special cases</li>
<li>Work backwards</li>
<li>Use direct reasoning</li>
<li>Use a formula</li>
<li>Solve an equation</li>
<li>Be ingenious</li>
</ul>


<h2>Polya&rsquo;s Third Principle: Carry out the plan</h2>

<p>This step is usually easier than devising the plan. In general, all you need is
care and patience, given that you have the necessary skills. Persist with the plan that
you have chosen. If it continues not to work discard it and choose another. Don&rsquo;t be
misled, this is how mathematics is done, even by professionals.</p>

<h2>Polya&rsquo;s Fourth Principle: Look back</h2>

<p>Polya mentions that much can be gained by taking the time to re
ect and look back at what you have done, what worked, and what didn&rsquo;t. Doing this will enable
you to predict what strategy to use to solve future problems.</p>

<p>So starting on the next page, here is a summary, in the master&rsquo;s own words, on
strategies for attacking problems in mathematics class. This is taken from the book,
<em>How To Solve It, by George Polya, 2nd ed., Princeton University Press, 1957, ISBN
0-691-08097-6.</em></p>

<h2>1. UNDERSTAND THE PROBLEM</h2>

<ul>
<li><strong>First.</strong> You have to understand the problem.</li>
<li>What is the unknown? What are the data? What is the condition?</li>
<li>Is it possible to satisfy the condition? Is the condition sufficient to determine the unknown? Or is it insuffcient? Or redundant? Or contradictory?</li>
<li>Draw a figure. Introduce suitable notation.</li>
<li>Separate the various parts of the condition. Can you write them down?</li>
</ul>


<h2>2. DEVISING A PLAN</h2>

<ul>
<li><strong>Second.</strong> Find the connection between the data and the unknown. You
may be obliged to consider auxiliary problems if an immediate connection
cannot be found. You should obtain eventually a plan of the solution.</li>
<li>Have you seen it before? Or have you seen the same problem in a slightly
different form?</li>
<li>Do you know a related problem? Do you know a theorem that could be
useful?</li>
<li>Look at the unknown! Try to think of a familiar problem having the same
or a similar unknown.</li>
<li>Here is a problem related to yours and solved before. Could you use it?
Could you use its result? Could you use its method? Should you introduce
some auxiliary element in order to make its use possible?</li>
<li>Could you restate the problem? Could you restate it still differently? Go
back to definitions.</li>
<li>If you cannot solve the proposed problem, try to solve first some related
problem. Could you imagine a more accessible related problem? A more
general problem? A more special problem? An analogous problem? Could
you solve a part of the problem? Keep only a part of the condition, drop
the other part; how far is the unknown then determined, how can it vary?
Could you derive something useful from the data? Could you think of
other data appropriate to determine the unknown? Could you change the
unknown or data, or both if necessary, so that the new unknown and the
new data are nearer to each other?</li>
<li>Did you use all the data? Did you use the whole condition? Have you
taken into account all essential notions involved in the problem?</li>
</ul>


<h2>3. CARRYING OUT THE PLAN</h2>

<ul>
<li><strong>Third.</strong> Carry out your plan.</li>
<li>Carrying out your plan of the solution, check each step. Can you see clearly
that the step is correct? Can you prove that it is correct?</li>
</ul>


<h2>4. LOOKING BACK</h2>

<ul>
<li><strong>Fourth.</strong> Examine the solution obtained.</li>
<li>Can you check the result? Can you check the argument?</li>
<li>Can you derive the solution differently? Can you see it at a glance?</li>
<li>Can you use the result, or the method, for some other problem?</li>
</ul>


<p>ref: <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://math.berkeley.edu/~gmelvin/math110sp14/polya.pdf<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Integration Test with Spring]]></title>
    <link href="http://gailo22.github.io/blog/2014/03/05/create-integration-test-with-spring/"/>
    <updated>2014-03-05T12:20:55+08:00</updated>
    <id>http://gailo22.github.io/blog/2014/03/05/create-integration-test-with-spring</id>
    <content type="html"><![CDATA[<p>Assume you want to create a integration test for UserDao class which has CRUD methods e.g find, save, update, delete.</p>

<h3>Please note that for integration test:</h3>

<ul>
<li>we are testing with other system like db so, we may require populate example data before test.</li>
<li><p>the test method name should say that we are expecting the actual return value or save successfully, NOT invoke or interaction with some method</p></li>
<li><p>shouldReturnNewUserWhenCreateNewUserOnSave() –> <strong>OK</strong></p></li>
<li>shouldInvokeSaveMehtodWhenUserIsNotNullOnSave() –> <strong>NOT</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Repository</span><span class="o">(</span><span class="s">&quot;userDao&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">User</span> <span class="nf">find</span><span class="o">(</span><span class="n">PK</span> <span class="n">id</span><span class="o">)</span> <span class="o">{...}</span>
</span><span class='line'>    <span class="n">User</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">object</span><span class="o">)</span> <span class="o">{...}</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">(</span><span class="n">PK</span> <span class="n">id</span><span class="o">)</span> <span class="o">{...}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create new class name UserDaoIntegrationTest with annotations as below</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">locations</span> <span class="o">=</span> <span class="s">&quot;classpath:applicationContext-dao-test.xml&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Transactional</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoIntegrationTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Inject class you want to test</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Autowired</span>
</span><span class='line'><span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Crete test method</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">shoudXXX</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Verify actual return value</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getUserName</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;user1&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Method Template</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="n">should</span><span class="o">&lt;</span><span class="n">Expecting</span><span class="o">&gt;</span><span class="n">When</span><span class="o">&lt;</span><span class="n">Criteria</span><span class="o">&gt;</span><span class="n">On</span><span class="o">&lt;</span><span class="n">MehtodName</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Given</span>
</span><span class='line'>    <span class="n">Populate</span> <span class="n">require</span> <span class="n">arguments</span> <span class="k">for</span> <span class="n">testing</span> <span class="n">method</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// When</span>
</span><span class='line'>    <span class="n">Invoke</span> <span class="n">method</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">test</span> <span class="n">with</span> <span class="n">actual</span> <span class="n">value</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Then</span>
</span><span class='line'>    <span class="n">Check</span> <span class="k">return</span> <span class="n">value</span> <span class="n">from</span> <span class="n">the</span> <span class="n">method</span><span class="o">.</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Example</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldReturnUserOnFindByKey</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Given // When </span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">userDao</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Then</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getUserName</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;user1&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldCreateNewUserOnSave</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Given </span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">User</span> <span class="n">newUser</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="na">getDefaultObject</span><span class="o">();</span>
</span><span class='line'>  <span class="n">newUser</span><span class="o">.</span><span class="na">setReferenceType</span><span class="o">(</span><span class="n">ReferenceType</span><span class="o">.</span><span class="na">MYKAD</span><span class="o">);</span>
</span><span class='line'>  <span class="n">newUser</span><span class="o">.</span><span class="na">setUserName</span><span class="o">(</span><span class="s">&quot;abc&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">newUser</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&quot;password&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">newUser</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">newUser</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">&quot;abc@email.com&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">newUser</span><span class="o">.</span><span class="na">setUserStatus</span><span class="o">(</span><span class="n">UserStatus</span><span class="o">.</span><span class="na">ACTIVE</span><span class="o">);</span>
</span><span class='line'>  <span class="n">newUser</span><span class="o">.</span><span class="na">setCreatedBy</span><span class="o">(</span><span class="s">&quot;admin&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">newUser</span><span class="o">.</span><span class="na">setLastModifiedBy</span><span class="o">(</span><span class="s">&quot;admin&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// When</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">User</span> <span class="n">createdUser</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">newUser</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Then</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">User</span> <span class="n">foundUser</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">userDao</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">createdUser</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">foundUser</span><span class="o">.</span><span class="na">getUserName</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;abc&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">foundUser</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;password&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">foundUser</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;abc@email.com&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">foundUser</span><span class="o">.</span><span class="na">getCreatedBy</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;admin&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">foundUser</span><span class="o">.</span><span class="na">getLastModifiedBy</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="s">&quot;admin&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Unit Test with Mockito]]></title>
    <link href="http://gailo22.github.io/blog/2014/03/03/create-unit-test-with-mockito/"/>
    <updated>2014-03-03T16:21:30+08:00</updated>
    <id>http://gailo22.github.io/blog/2014/03/03/create-unit-test-with-mockito</id>
    <content type="html"><![CDATA[<p>Assume you want to create a unit test for UserService class, getUserByUserName(String username) method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Service</span><span class="o">(</span><span class="s">&quot;userService&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">User</span> <span class="nf">getUserByUserName</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="n">userDao</span><span class="o">.</span><span class="na">getUserByName</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create new class name UserServiceImplTest</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImplTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Inject class you want to test</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@InjectMocks</span>
</span><span class='line'><span class="kd">private</span> <span class="n">UserServiceImpl</span> <span class="n">userService</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Mock related objects</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Mock</span>
</span><span class='line'><span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDaoMock</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Setup annotation support</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Before</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">initMocks</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create test method</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">shoudXXX</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Verify expectation</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">userService</span><span class="o">).</span><span class="na">getUserById</span><span class="o">(</span><span class="s">&quot;admin&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="kc">true</span><span class="o">,</span> <span class="n">equalTo</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Static import required classes</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Before</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.mockito.InjectMocks</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.mockito.Mock</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">IsEqual</span><span class="o">.</span><span class="na">equalTo</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.</span><span class="na">mock</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.</span><span class="na">verify</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.</span><span class="na">when</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">MockitoAnnotations</span><span class="o">.</span><span class="na">initMocks</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Method Template</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="n">should</span><span class="o">&lt;</span><span class="n">Expecting</span><span class="o">&gt;</span><span class="n">When</span><span class="o">&lt;</span><span class="n">Criteria</span><span class="o">&gt;</span><span class="n">On</span><span class="o">&lt;</span><span class="n">MehtodName</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Given</span>
</span><span class='line'>    <span class="n">Declare</span> <span class="n">your</span> <span class="n">mock</span> <span class="n">object</span> <span class="n">and</span> <span class="n">expectation</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// When</span>
</span><span class='line'>    <span class="n">Invoke</span> <span class="n">method</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">test</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Then</span>
</span><span class='line'>    <span class="n">Verify</span> <span class="n">method</span> <span class="n">invocation</span><span class="o">.</span>
</span><span class='line'>    <span class="n">Check</span> <span class="k">return</span> <span class="n">value</span> <span class="n">from</span> <span class="n">the</span> <span class="n">method</span><span class="o">.</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Example</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="n">shouldReturnUserWhenUserNameIsNotNullOnGetUserByUserName</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Given</span>
</span><span class='line'>    <span class="n">User</span> <span class="n">userMock</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">userDaoMock</span><span class="o">.</span><span class="na">getByUserName</span><span class="o">(</span><span class="s">&quot;admin&quot;</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">userMock</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// When</span>
</span><span class='line'>    <span class="n">User</span> <span class="n">returnUser</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">getUserByUserName</span><span class="o">(</span><span class="s">&quot;admin&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Then</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">returnUser</span><span class="o">,</span> <span class="n">equalTo</span><span class="o">(</span><span class="n">userMock</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pass function as argument in Java]]></title>
    <link href="http://gailo22.github.io/blog/2014/02/28/pass-function-as-argument-java/"/>
    <updated>2014-02-28T12:57:17+08:00</updated>
    <id>http://gailo22.github.io/blog/2014/02/28/pass-function-as-argument-java</id>
    <content type="html"><![CDATA[<p>This is an example of passing function as argument in java. It kind of ugly but it can solve my duplicate code problem as below:</p>

<h2>before</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span> <span class="o">=</span> <span class="s">&quot;gailo&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;oct: &quot;</span> <span class="o">+</span> <span class="n">toOct</span><span class="o">(</span><span class="n">bs</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;binary: &quot;</span> <span class="o">+</span> <span class="n">toBin</span><span class="o">(</span><span class="n">bs</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;hex: &quot;</span> <span class="o">+</span> <span class="n">toHex</span><span class="o">(</span><span class="n">bs</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toOct</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>          <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toBin</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="n">b</span><span class="o">));</span>
</span><span class='line'>          <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toHex</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">b</span><span class="o">));</span>
</span><span class='line'>          <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>after</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.google.common.base.Function</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span> <span class="o">=</span> <span class="s">&quot;gailo&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;oct: &quot;</span> <span class="o">+</span> <span class="n">toString</span><span class="o">(</span><span class="n">bs</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Integer</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}));</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;binary: &quot;</span> <span class="o">+</span> <span class="n">toString</span><span class="o">(</span><span class="n">bs</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Integer</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">}));</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;hex: &quot;</span> <span class="o">+</span> <span class="n">toString</span><span class="o">(</span><span class="n">bs</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Integer</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}));</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span><span class="o">,</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">function</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">bs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">function</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">b</span><span class="o">)));</span>
</span><span class='line'>          <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Scala]]></title>
    <link href="http://gailo22.github.io/blog/2013/07/30/hello-scala/"/>
    <updated>2013-07-30T17:58:00+08:00</updated>
    <id>http://gailo22.github.io/blog/2013/07/30/hello-scala</id>
    <content type="html"><![CDATA[

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">hello</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Hello world!&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Functional style:</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">append</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">xs</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="n">ys</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">xs</span> <span class="o">==</span> <span class="nc">Nil</span><span class="o">)</span> <span class="n">ys</span> <span class="k">else</span> <span class="n">xs</span><span class="o">.</span><span class="n">head</span> <span class="o">::</span> <span class="n">append</span><span class="o">(</span><span class="n">xs</span><span class="o">.</span><span class="n">tail</span><span class="o">,</span> <span class="n">ys</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">,</span> <span class="n">xs</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">xs</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Nil</span> <span class="k">=&gt;</span> <span class="nc">Nil</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">h</span><span class="o">::</span><span class="n">t</span> <span class="k">=&gt;</span> <span class="n">f</span><span class="o">(</span><span class="n">h</span><span class="o">)</span> <span class="o">::</span> <span class="n">map</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">increment</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Usage:</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="n">map</span><span class="o">(</span><span class="n">increment</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">))</span>
</span><span class='line'><span class="n">a</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Python]]></title>
    <link href="http://gailo22.github.io/blog/2012/12/06/hello-python/"/>
    <updated>2012-12-06T09:01:00+08:00</updated>
    <id>http://gailo22.github.io/blog/2012/12/06/hello-python</id>
    <content type="html"><![CDATA[<p>This is my first program with python using gvim is a editor.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_add</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">y</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">f</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_add_lambda</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">lambda</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>How to use it</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>agile@COM:~/Desktop$ python -i o.py
</span><span class='line'>>>> square(2)
</span><span class='line'>4
</span><span class='line'>>>> make_add3 = make_add(3)
</span><span class='line'>>>> make_add3(5)
</span><span class='line'>8
</span><span class='line'>>>></span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
